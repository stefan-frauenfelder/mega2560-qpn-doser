/*****************************************************************************
* Model: Doser.qm
* File:  ./scale.cpp
*
* This code has been generated by QM tool (see state-machine.com/qm).
* DO NOT EDIT THIS FILE MANUALLY. All your changes will be lost.
*
* This program is open source software: you can redistribute it and/or
* modify it under the terms of the GNU General Public License as published
* by the Free Software Foundation.
*
* This program is distributed in the hope that it will be useful, but
* WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
* or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
* for more details.
*****************************************************************************/
/*${.::scale.cpp} ..........................................................*/

//#include "qfn_port.h"
#include "qpn.h"
#include "board.h"
#include "activeObjects.h"

/*Q_DEFINE_THIS_FILE*/


/* Scale class declaration -----------------------------------------------*/
/*${components::Scale} .....................................................*/
typedef struct Scale {
/* protected: */
    QActive super;

/* public: */
    float weight;
} Scale;

/* protected: */
static QState Scale_initial(Scale * const me);
static QState Scale_idle(Scale * const me);
static QState Scale_sampling(Scale * const me);
static QState Scale_calibration(Scale * const me);
static QState Scale_measuring(Scale * const me);


/* Global objects ----------------------------------------------------------*/
Scale AO_Scale;     /* the single instance of the Scale active object */

/* Scale class definition ------------------------------------------------*/
/*${components::Scale_constructor} .........................................*/
void Scale_constructor(void) {
    QActive_ctor(&AO_Scale.super, Q_STATE_CAST(&Scale_initial));
}
/*${components::Scale} .....................................................*/
/*${components::Scale::SM} .................................................*/
static QState Scale_initial(Scale * const me) {
    /* ${components::Scale::SM::initial} */
    return Q_TRAN(&Scale_measuring);
}
/*${components::Scale::SM::idle} ...........................................*/
static QState Scale_idle(Scale * const me) {
    QState status_;
    switch (Q_SIG(me)) {
        /* ${components::Scale::SM::idle} */
        case Q_ENTRY_SIG: {
            BSP_ledOn();
            QActive_arm((QActive *)me, BSP_TICKS_PER_SEC);
            status_ = Q_HANDLED();
            break;
        }
        /* ${components::Scale::SM::idle} */
        case Q_EXIT_SIG: {
            BSP_ledOff();
            status_ = Q_HANDLED();
            break;
        }
        /* ${components::Scale::SM::idle::SCALE_CALIB} */
        case SCALE_CALIB_SIG: {
            status_ = Q_HANDLED();
            break;
        }
        /* ${components::Scale::SM::idle::Q_TIMEOUT} */
        case Q_TIMEOUT_SIG: {
            status_ = Q_TRAN(&Scale_measuring);
            break;
        }
        default: {
            status_ = Q_SUPER(&QHsm_top);
            break;
        }
    }
    return status_;
}
/*${components::Scale::SM::sampling} .......................................*/
static QState Scale_sampling(Scale * const me) {
    QState status_;
    switch (Q_SIG(me)) {
        /* ${components::Scale::SM::sampling} */
        case Q_ENTRY_SIG: {
            me->weight = BSP_scaleSample();
            status_ = Q_HANDLED();
            break;
        }
        /* ${components::Scale::SM::sampling::SCALE_SAMPLING_DONE} */
        case SCALE_SAMPLING_DONE_SIG: {
            /* ${components::Scale::SM::sampling::SCALE_SAMPLING_D~::[weight>TargetDose]} */
            if (me->weight <  100*TargetDose) {
                status_ = Q_TRAN(&Scale_measuring);
            }
            /* ${components::Scale::SM::sampling::SCALE_SAMPLING_D~::[else]} */
            else {
                status_ = Q_TRAN(&Scale_idle);
            }
            break;
        }
        default: {
            status_ = Q_SUPER(&QHsm_top);
            break;
        }
    }
    return status_;
}
/*${components::Scale::SM::calibration} ....................................*/
static QState Scale_calibration(Scale * const me) {
    QState status_;
    switch (Q_SIG(me)) {
        /* ${components::Scale::SM::calibration::SCALE_CALIB_DONE} */
        case SCALE_CALIB_DONE_SIG: {
            status_ = Q_HANDLED();
            break;
        }
        default: {
            status_ = Q_SUPER(&QHsm_top);
            break;
        }
    }
    return status_;
}
/*${components::Scale::SM::measuring} ......................................*/
static QState Scale_measuring(Scale * const me) {
    QState status_;
    switch (Q_SIG(me)) {
        /* ${components::Scale::SM::measuring} */
        case Q_ENTRY_SIG: {
            QActive_arm((QActive *)me, SCALE_MEASUREMENT_RATE);

            status_ = Q_HANDLED();
            break;
        }
        /* ${components::Scale::SM::measuring::Q_TIMEOUT} */
        case Q_TIMEOUT_SIG: {
            status_ = Q_TRAN(&Scale_sampling);
            break;
        }
        default: {
            status_ = Q_SUPER(&QHsm_top);
            break;
        }
    }
    return status_;
}

