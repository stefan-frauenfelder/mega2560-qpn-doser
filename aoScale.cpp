/*****************************************************************************
* Model: mega2560-qpn-doser.qm
* File:  ./aoScale.cpp
*
* This code has been generated by QM tool (see state-machine.com/qm).
* DO NOT EDIT THIS FILE MANUALLY. All your changes will be lost.
*
* This program is open source software: you can redistribute it and/or
* modify it under the terms of the GNU General Public License as published
* by the Free Software Foundation.
*
* This program is distributed in the hope that it will be useful, but
* WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
* or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
* for more details.
*****************************************************************************/
/*${.::aoScale.cpp} ........................................................*/

//#include "qfn_port.h"
#include "qpn.h"
#include "board.h"
#include "activeObjects.h"

/*Q_DEFINE_THIS_FILE*/


/* Scale class declaration -----------------------------------------------*/
/*${components::aoScale} ...................................................*/
typedef struct aoScale {
/* protected: */
    QActive super;

/* public: */
    float weight;
} aoScale;

/* protected: */
static QState aoScale_initial(aoScale * const me);
static QState aoScale_idle(aoScale * const me);
static QState aoScale_taring(aoScale * const me);
static QState aoScale_measuring(aoScale * const me);
static QState aoScale_recovering(aoScale * const me);
static QState aoScale_sampling(aoScale * const me);


/* Global objects ----------------------------------------------------------*/
aoScale AO_Scale;     /* the single instance of the Scale active object */

/* Scale class definition ------------------------------------------------*/
/*${components::aoScale_constructor} .......................................*/
void aoScale_constructor(void) {
    QActive_ctor(&AO_Scale.super, Q_STATE_CAST(&aoScale_initial));
}
/*${components::aoScale} ...................................................*/
/*${components::aoScale::SM} ...............................................*/
static QState aoScale_initial(aoScale * const me) {
    /* ${components::aoScale::SM::initial} */
    return Q_TRAN(&aoScale_idle);
}
/*${components::aoScale::SM::idle} .........................................*/
static QState aoScale_idle(aoScale * const me) {
    QState status_;
    switch (Q_SIG(me)) {
        /* ${components::aoScale::SM::idle} */
        case Q_ENTRY_SIG: {
            BSP_println("Scale enter idle.");
            status_ = Q_HANDLED();
            break;
        }
        /* ${components::aoScale::SM::idle::SCALE_TARE} */
        case SCALE_TARE_SIG: {
            status_ = Q_TRAN(&aoScale_taring);
            break;
        }
        /* ${components::aoScale::SM::idle::SCALE_START} */
        case SCALE_START_SIG: {
            status_ = Q_TRAN(&aoScale_measuring);
            break;
        }
        default: {
            status_ = Q_SUPER(&QHsm_top);
            break;
        }
    }
    return status_;
}
/*${components::aoScale::SM::taring} .......................................*/
static QState aoScale_taring(aoScale * const me) {
    QState status_;
    switch (Q_SIG(me)) {
        /* ${components::aoScale::SM::taring} */
        case Q_ENTRY_SIG: {
            BSP_println("Scale taring.");
            BSP_scaleTare();
            status_ = Q_HANDLED();
            break;
        }
        /* ${components::aoScale::SM::taring::SCALE_TARE_DONE} */
        case SCALE_TARE_DONE_SIG: {
            QActive_postISR((QActive *)&AO_Grinder, SCALE_TARE_DONE_SIG, 0);
            status_ = Q_TRAN(&aoScale_idle);
            break;
        }
        default: {
            status_ = Q_SUPER(&QHsm_top);
            break;
        }
    }
    return status_;
}
/*${components::aoScale::SM::measuring} ....................................*/
static QState aoScale_measuring(aoScale * const me) {
    QState status_;
    switch (Q_SIG(me)) {
        /* ${components::aoScale::SM::measuring} */
        case Q_ENTRY_SIG: {
            BSP_println("Start measuring.");
            status_ = Q_HANDLED();
            break;
        }
        /* ${components::aoScale::SM::measuring} */
        case Q_EXIT_SIG: {
            BSP_println("Stop measuring.");
            status_ = Q_HANDLED();
            break;
        }
        /* ${components::aoScale::SM::measuring::initial} */
        case Q_INIT_SIG: {
            status_ = Q_TRAN(&aoScale_sampling);
            break;
        }
        /* ${components::aoScale::SM::measuring::SCALE_STOP} */
        case SCALE_STOP_SIG: {
            status_ = Q_TRAN(&aoScale_idle);
            break;
        }
        default: {
            status_ = Q_SUPER(&QHsm_top);
            break;
        }
    }
    return status_;
}
/*${components::aoScale::SM::measuring::recovering} ........................*/
static QState aoScale_recovering(aoScale * const me) {
    QState status_;
    switch (Q_SIG(me)) {
        /* ${components::aoScale::SM::measuring::recovering} */
        case Q_ENTRY_SIG: {
            QActive_arm((QActive *)me, SCALE_MEASUREMENT_RATE);
            status_ = Q_HANDLED();
            break;
        }
        /* ${components::aoScale::SM::measuring::recovering::Q_TIMEOUT} */
        case Q_TIMEOUT_SIG: {
            status_ = Q_TRAN(&aoScale_sampling);
            break;
        }
        default: {
            status_ = Q_SUPER(&aoScale_measuring);
            break;
        }
    }
    return status_;
}
/*${components::aoScale::SM::measuring::sampling} ..........................*/
static QState aoScale_sampling(aoScale * const me) {
    QState status_;
    switch (Q_SIG(me)) {
        /* ${components::aoScale::SM::measuring::sampling} */
        case Q_ENTRY_SIG: {
            me->weight = BSP_scaleSample();
            Weight = me->weight;
            status_ = Q_HANDLED();
            break;
        }
        /* ${components::aoScale::SM::measuring::sampling::SCALE_SAMPLING_DONE} */
        case SCALE_SAMPLING_DONE_SIG: {
            QActive_postISR((QActive *)&AO_Weight, REFRESH_SIG, 0);
            QActive_postISR((QActive *)&AO_Display, REFRESH_SIG, 0);
            status_ = Q_TRAN(&aoScale_recovering);
            break;
        }
        default: {
            status_ = Q_SUPER(&aoScale_measuring);
            break;
        }
    }
    return status_;
}

