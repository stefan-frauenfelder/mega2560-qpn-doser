/*****************************************************************************
* Model: mega2560-qpn-doser.qm
* File:  ./aoGrinder.cpp
*
* This code has been generated by QM tool (see state-machine.com/qm).
* DO NOT EDIT THIS FILE MANUALLY. All your changes will be lost.
*
* This program is open source software: you can redistribute it and/or
* modify it under the terms of the GNU General Public License as published
* by the Free Software Foundation.
*
* This program is distributed in the hope that it will be useful, but
* WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
* or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
* for more details.
*****************************************************************************/
/*${.::aoGrinder.cpp} ......................................................*/

//#include "qfn_port.h"
#include "qpn.h"
#include "board.h"
#include "activeObjects.h"

/*Q_DEFINE_THIS_FILE*/


/* Scale class declaration -----------------------------------------------*/
/*${components::aoGrinder} .................................................*/
typedef struct aoGrinder {
/* protected: */
    QActive super;

/* public: */
    float dose;
} aoGrinder;

/* protected: */
static QState aoGrinder_initial(aoGrinder * const me);
static QState aoGrinder_idle(aoGrinder * const me);
static QState aoGrinder_grinding(aoGrinder * const me);
static QState aoGrinder_polling(aoGrinder * const me);
static QState aoGrinder_done(aoGrinder * const me);
static QState aoGrinder_rest(aoGrinder * const me);
static QState aoGrinder_calibration(aoGrinder * const me);
static QState aoGrinder_settling(aoGrinder * const me);
static QState aoGrinder_settlingPolling(aoGrinder * const me);


/* Global objects ----------------------------------------------------------*/
aoGrinder AO_Grinder;     /* the single instance of the Grinder active object */

/* Scale class definition ------------------------------------------------*/
/*${components::aoGrinder_constructor} .....................................*/
void aoGrinder_constructor(void) {
    QActive_ctor(&AO_Grinder.super, Q_STATE_CAST(&aoGrinder_initial));
}
/*${components::aoGrinder} .................................................*/
/*${components::aoGrinder::SM} .............................................*/
static QState aoGrinder_initial(aoGrinder * const me) {
    /* ${components::aoGrinder::SM::initial} */
    TargetDose = 7;
    return Q_TRAN(&aoGrinder_idle);
}
/*${components::aoGrinder::SM::idle} .......................................*/
static QState aoGrinder_idle(aoGrinder * const me) {
    QState status_;
    switch (Q_SIG(me)) {
        /* ${components::aoGrinder::SM::idle} */
        case Q_ENTRY_SIG: {
            BSP_println("Grinder enter idle.");
            BSP_displayPosition(0.0);
            status_ = Q_HANDLED();
            break;
        }
        /* ${components::aoGrinder::SM::idle::BUTTON_DOWN} */
        case BUTTON_DOWN_SIG: {
            status_ = Q_TRAN(&aoGrinder_calibration);
            break;
        }
        default: {
            status_ = Q_SUPER(&QHsm_top);
            break;
        }
    }
    return status_;
}
/*${components::aoGrinder::SM::grinding} ...................................*/
static QState aoGrinder_grinding(aoGrinder * const me) {
    QState status_;
    switch (Q_SIG(me)) {
        /* ${components::aoGrinder::SM::grinding} */
        case Q_ENTRY_SIG: {
            BSP_println("Start grinding.");
            BSP_ledOn();
            QActive_postISR((QActive *)&AO_Scale, SCALE_START_SIG, 0);
            status_ = Q_HANDLED();
            break;
        }
        /* ${components::aoGrinder::SM::grinding} */
        case Q_EXIT_SIG: {
            BSP_ledOff();
            status_ = Q_HANDLED();
            break;
        }
        /* ${components::aoGrinder::SM::grinding::initial} */
        case Q_INIT_SIG: {
            status_ = Q_TRAN(&aoGrinder_polling);
            break;
        }
        default: {
            status_ = Q_SUPER(&QHsm_top);
            break;
        }
    }
    return status_;
}
/*${components::aoGrinder::SM::grinding::polling} ..........................*/
static QState aoGrinder_polling(aoGrinder * const me) {
    QState status_;
    switch (Q_SIG(me)) {
        /* ${components::aoGrinder::SM::grinding::polling} */
        case Q_ENTRY_SIG: {
            BSP_displayPosition(Weight);
            status_ = Q_HANDLED();
            break;
        }
        /* ${components::aoGrinder::SM::grinding::polling::SCALE_SAMPLING_DONE} */
        case SCALE_SAMPLING_DONE_SIG: {
            /* ${components::aoGrinder::SM::grinding::polling::SCALE_SAMPLING_D~::[enougth?]} */
            if (Weight >= TargetDose) {
                status_ = Q_TRAN(&aoGrinder_settling);
            }
            /* ${components::aoGrinder::SM::grinding::polling::SCALE_SAMPLING_D~::[else]} */
            else {
                status_ = Q_TRAN(&aoGrinder_polling);
            }
            break;
        }
        default: {
            status_ = Q_SUPER(&aoGrinder_grinding);
            break;
        }
    }
    return status_;
}
/*${components::aoGrinder::SM::done} .......................................*/
static QState aoGrinder_done(aoGrinder * const me) {
    QState status_;
    switch (Q_SIG(me)) {
        /* ${components::aoGrinder::SM::done} */
        case Q_ENTRY_SIG: {
            BSP_println("Grinder done.");
            BSP_displayPosition(BSP_scaleAverageWeight());
            status_ = Q_HANDLED();
            break;
        }
        /* ${components::aoGrinder::SM::done} */
        case Q_EXIT_SIG: {
            QActive_postISR((QActive *)&AO_Scale, SCALE_STOP_SIG, 0);
            status_ = Q_HANDLED();
            break;
        }
        /* ${components::aoGrinder::SM::done::initial} */
        case Q_INIT_SIG: {
            status_ = Q_TRAN(&aoGrinder_rest);
            break;
        }
        default: {
            status_ = Q_SUPER(&QHsm_top);
            break;
        }
    }
    return status_;
}
/*${components::aoGrinder::SM::done::rest} .................................*/
static QState aoGrinder_rest(aoGrinder * const me) {
    QState status_;
    switch (Q_SIG(me)) {
        /* ${components::aoGrinder::SM::done::rest::SCALE_SAMPLING_DONE} */
        case SCALE_SAMPLING_DONE_SIG: {
            /* ${components::aoGrinder::SM::done::rest::SCALE_SAMPLING_D~::[Weight>0]} */
            if (Weight > 0) {
                status_ = Q_TRAN(&aoGrinder_rest);
            }
            /* ${components::aoGrinder::SM::done::rest::SCALE_SAMPLING_D~::[else]} */
            else {
                status_ = Q_TRAN(&aoGrinder_idle);
            }
            break;
        }
        default: {
            status_ = Q_SUPER(&aoGrinder_done);
            break;
        }
    }
    return status_;
}
/*${components::aoGrinder::SM::calibration} ................................*/
static QState aoGrinder_calibration(aoGrinder * const me) {
    QState status_;
    switch (Q_SIG(me)) {
        /* ${components::aoGrinder::SM::calibration} */
        case Q_ENTRY_SIG: {
            QActive_postISR((QActive *)&AO_Scale, SCALE_TARE_SIG, 0);
            status_ = Q_HANDLED();
            break;
        }
        /* ${components::aoGrinder::SM::calibration::SCALE_TARE_DONE} */
        case SCALE_TARE_DONE_SIG: {
            status_ = Q_TRAN(&aoGrinder_grinding);
            break;
        }
        default: {
            status_ = Q_SUPER(&QHsm_top);
            break;
        }
    }
    return status_;
}
/*${components::aoGrinder::SM::settling} ...................................*/
static QState aoGrinder_settling(aoGrinder * const me) {
    QState status_;
    switch (Q_SIG(me)) {
        /* ${components::aoGrinder::SM::settling} */
        case Q_ENTRY_SIG: {
            QActive_arm((QActive *)me, GRINDER_SETTLING_TIME);
            status_ = Q_HANDLED();
            break;
        }
        /* ${components::aoGrinder::SM::settling::initial} */
        case Q_INIT_SIG: {
            status_ = Q_TRAN(&aoGrinder_settlingPolling);
            break;
        }
        /* ${components::aoGrinder::SM::settling::Q_TIMEOUT} */
        case Q_TIMEOUT_SIG: {
            status_ = Q_TRAN(&aoGrinder_done);
            break;
        }
        default: {
            status_ = Q_SUPER(&QHsm_top);
            break;
        }
    }
    return status_;
}
/*${components::aoGrinder::SM::settling::settlingPolling} ..................*/
static QState aoGrinder_settlingPolling(aoGrinder * const me) {
    QState status_;
    switch (Q_SIG(me)) {
        /* ${components::aoGrinder::SM::settling::settlingPolling} */
        case Q_ENTRY_SIG: {
            BSP_displayPosition(Weight);
            status_ = Q_HANDLED();
            break;
        }
        /* ${components::aoGrinder::SM::settling::settlingPolling::SCALE_SAMPLING_DONE} */
        case SCALE_SAMPLING_DONE_SIG: {
            status_ = Q_TRAN(&aoGrinder_settlingPolling);
            break;
        }
        default: {
            status_ = Q_SUPER(&aoGrinder_settling);
            break;
        }
    }
    return status_;
}

