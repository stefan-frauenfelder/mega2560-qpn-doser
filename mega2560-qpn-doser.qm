<?xml version="1.0" encoding="UTF-8"?>
<model version="3.3.0">
 <documentation>Simple model template for QP-nano</documentation>
 <framework name="qpn"/>
 <package name="components" stereotype="0x02">
  <class name="Scale" superclass="qpn::QActive">
   <attribute name="weight" type="float" visibility="0x00" properties="0x00"/>
   <statechart>
    <initial target="../4">
     <initial_glyph conn="33,42,5,3,10">
      <action box="0,-2,10,2"/>
     </initial_glyph>
    </initial>
    <state name="idle">
     <entry brief="LED on">BSP_ledOn();
QActive_arm((QActive *)me, BSP_TICKS_PER_SEC);</entry>
     <exit brief="LED off">BSP_ledOff();</exit>
     <tran trig="SCALE_CALIB">
      <tran_glyph conn="40,16,3,1,-16">
       <action box="-11,-2,10,2"/>
      </tran_glyph>
     </tran>
     <tran trig="Q_TIMEOUT" target="../../4">
      <tran_glyph conn="52,26,2,0,9">
       <action box="0,0,10,2"/>
      </tran_glyph>
     </tran>
     <state_glyph node="40,11,21,15">
      <entry box="1,2,12,2"/>
      <exit box="1,4,9,3"/>
     </state_glyph>
    </state>
    <state name="sampling">
     <entry brief="sample">me-&gt;weight = BSP_scaleSample();</entry>
     <tran trig="SCALE_SAMPLING_DONE">
      <choice target="../../../1">
       <guard>else</guard>
       <choice_glyph conn="88,40,4,1,-22,-27">
        <action box="0,-4,10,2"/>
       </choice_glyph>
      </choice>
      <choice target="../../../4">
       <guard brief="weight &gt; TargetDose">me-&gt;weight &lt;  100*TargetDose</guard>
       <choice_glyph conn="88,40,5,1,-29">
        <action box="-16,-2,15,2"/>
       </choice_glyph>
      </choice>
      <tran_glyph conn="71,49,3,-1,17,-9">
       <action box="0,0,18,2"/>
      </tran_glyph>
     </tran>
     <state_glyph node="71,33,23,19">
      <entry box="1,2,9,2"/>
     </state_glyph>
    </state>
    <state name="calibration">
     <tran trig="SCALE_CALIB_DONE">
      <tran_glyph conn="24,22,1,3,16">
       <action box="0,-2,16,2"/>
      </tran_glyph>
     </tran>
     <state_glyph node="7,11,17,15"/>
    </state>
    <state name="measuring">
     <entry brief="armTimer">QActive_arm((QActive *)me, SCALE_MEASUREMENT_RATE);
</entry>
     <tran trig="Q_TIMEOUT" target="../../2">
      <tran_glyph conn="59,45,1,3,12">
       <action box="0,-2,10,2"/>
      </tran_glyph>
     </tran>
     <state_glyph node="43,35,16,15">
      <entry box="1,2,10,2"/>
     </state_glyph>
    </state>
    <state_diagram size="101,61"/>
   </statechart>
  </class>
  <class name="Grinder" superclass="qpn::QActive">
   <attribute name="dose" type="float" visibility="0x00" properties="0x00"/>
   <statechart>
    <initial target="../1">
     <initial_glyph conn="6,3,5,0,17,5">
      <action box="0,-2,10,2"/>
     </initial_glyph>
    </initial>
    <state name="on">
     <initial target="../3">
      <initial_glyph conn="9,19,5,3,5">
       <action box="0,-2,10,2"/>
      </initial_glyph>
     </initial>
     <tran trig="ENCODER_INC">
      <action brief="DOSE +">TargetDose += GRINDER_DOSE_STEP;
BSP_displayDose(TargetDose);</action>
      <tran_glyph conn="42,15,1,1,11,5,-11">
       <action box="0,-2,13,4"/>
      </tran_glyph>
     </tran>
     <tran trig="ENCODER_DEC">
      <action brief="DOSE -">TargetDose -= GRINDER_DOSE_STEP;
BSP_displayDose(TargetDose);</action>
      <tran_glyph conn="42,30,1,1,11,8,-11">
       <action box="0,-2,14,4"/>
      </tran_glyph>
     </tran>
     <state name="idle">
      <entry brief="Initialize">TargetDose = 7;</entry>
      <tran trig="Q_TIMEOUT">
       <tran_glyph conn="23,26,2,0,5">
        <action box="0,0,8,2"/>
       </tran_glyph>
      </tran>
      <state_glyph node="14,13,16,13">
       <entry box="1,2,12,8"/>
      </state_glyph>
     </state>
     <state name="grinding">
      <state_glyph node="14,31,16,11"/>
     </state>
     <state_glyph node="6,8,36,41"/>
    </state>
    <state_diagram size="69,63"/>
   </statechart>
  </class>
  <attribute name="AO_Scale" type="QActive * const" visibility="0x00" properties="0x00"/>
  <attribute name="AO_Grinder" type="QActive * const" visibility="0x00" properties="0x00"/>
  <attribute name="TargetDose" type="float" visibility="0x00" properties="0x00"/>
  <operation name="Scale_constructor" type="void" visibility="0x00" properties="0x00">
   <code>QActive_ctor(&amp;AO_Scale.super, Q_STATE_CAST(&amp;Scale_initial));</code>
  </operation>
  <operation name="Grinder_constructor" type="void" visibility="0x00" properties="0x00">
   <documentation>constructor</documentation>
   <code>QActive_ctor(&amp;AO_Grinder.super, Q_STATE_CAST(&amp;Grinder_initial));</code>
  </operation>
 </package>
 <directory name=".">
  <file name="doser.c"/>
  <file name="Doser.ino">
   <text>
//#include &quot;includes.h&quot;

//#include &quot;qfn_port.h&quot;               // QP-nano port
#include &quot;qpn.h&quot;                    // QP-nano port
#include &quot;board.h&quot;                  // Board Support Functions
#include &quot;activeObjects.h&quot;          // application interface


Q_DEFINE_THIS_FILE

 // this blathering on is in case you want to make the class a static variable in a function
extern &quot;C&quot; {
  __extension__ typedef int __guard __attribute__((mode (__DI__)));
  int __cxa_guard_acquire(__guard *g) { return !*(char *)(g); };
  void __cxa_guard_release (__guard *g) { *(char *)g = 1; };
  void __cxa_guard_abort (__guard *) { };
} // end extern &quot;C&quot;



static QEvt scaleQueue[5];
static QEvt grinderQueue[5];

// QF_active[] array defines all active object control blocks
QActiveCB const Q_ROM Q_ROM_VAR QF_active[] = {
    { (QActive *)0,           (QEvt *)0,     0                    },
    { (QActive *)&amp;AO_Scale,   scaleQueue,    Q_DIM(scaleQueue)    },
    { (QActive *)&amp;AO_Grinder, grinderQueue,  Q_DIM(grinderQueue)  }
};


// make sure that the QF_active[] array matches QF_MAX_ACTIVE in qpn_port.h
Q_ASSERT_COMPILE(QF_MAX_ACTIVE == Q_DIM(QF_active) - 1);

$define(components::TargetDose)


/* QF callbacks ============================================================*/
void QF_onStartup(void) {

    /* set Timer2 in CTC mode, 1/1024 prescaler, start the timer ticking... 
    TCCR2A = (1U &lt;&lt; WGM21) | (0U &lt;&lt; WGM20);
    TCCR2B = (1U &lt;&lt; CS22 ) | (1U &lt;&lt; CS21) | (1U &lt;&lt; CS20); 
    ASSR  &amp;= ~(1U &lt;&lt; AS2);
    TIMSK2 = (1U &lt;&lt; OCIE2A); /* Enable TIMER2 compare Interrupt 
    TCNT2  = 0U;
    OCR2A  = (F_CPU / BSP_TICKS_PER_SEC / 1024U) - 1U;
*/
    // configure 8bit Timer0
    TCCR0A = (1 &lt;&lt; WGM01) | (0 &lt;&lt; WGM00); // timer/counter control, CTC mode, no PWM
    TCCR0B = (1 &lt;&lt; CS02 ) | (0 &lt;&lt; CS01) | (1 &lt;&lt; CS00); // timer/counter control, 1/1024 prescaler, internal clock source
    //ASSR  &amp;= ~(1 &lt;&lt; AS2);
    TIMSK0 = (1 &lt;&lt; OCIE0A);         // timer interrupt mask, enable TIMER2 compare Interrupt
    TCNT0  = 0;                     // timer/counter 0, initialize couter to 0
    OCR0A  = (F_CPU / BSP_TICKS_PER_SEC / 1024) - 1; // output compare register, init with value to compare to
}
/*..........................................................................*/
void QF_onCleanup(void) {
}

/*..........................................................................*/
void QV_onIdle(void) {   /* called with interrupts DISABLED, see NOTE1 */

    QF_INT_ENABLE(); /* just enable interrupts */

}
/*..........................................................................*/
void Q_onAssert(char const Q_ROM * const file, int line) {
    /* implement the error-handling policy for your application!!! */
    Serial1.println(&quot;Assert hit.&quot;);

    QF_INT_DISABLE(); /* disable all interrupts */
    QF_RESET();  /* reset the CPU */
}

void setup() {

    /*
    BSP_init(); // initialize the BSP

    QF::init(); // initialize the framework and the underlying RT kernel

    static QEvt const *grinder_queueSto[10]; // alocate event queue buffer
    static QEvt const *scale_queueSto[10]; // alocate event queue buffer

    static QF_MPOOL_EL(GrinderEvent) l_smlPoolSto[20]; //storage for small epool

    QF::poolInit(l_smlPoolSto, sizeof(l_smlPoolSto), sizeof(l_smlPoolSto[0])); // initialize event pools...

    DOSE = 7.0;

    AO_Grinder-&gt;start(1, grinder_queueSto, Q_DIM(grinder_queueSto), (void *)0, 0U); // start the grinder active object
    AO_Scale-&gt;start(2, scale_queueSto, Q_DIM(scale_queueSto), (void *)0, 0U);        // start the scale active object
    */

    BSP_init(); // initialize the BSP
    Serial1.println(&quot;BSP init done.&quot;);
    Scale_constructor();  // instantiate the Sensor AO
    Grinder_constructor();    // instantiate the Pirs AO
    Serial1.println(&quot;Going to run.&quot;);
    QF_run();       // transfer control to QF-nano
}

void loop() {
    Serial1.println(&quot;Loop hit.&quot;);
}</text>
  </file>
  <file name="scale.cpp">
   <text>
//#include &quot;qfn_port.h&quot;
#include &quot;qpn.h&quot;
#include &quot;board.h&quot;
#include &quot;activeObjects.h&quot;

/*Q_DEFINE_THIS_FILE*/


/* Scale class declaration -----------------------------------------------*/
$declare(components::Scale)

/* Global objects ----------------------------------------------------------*/
Scale AO_Scale;     /* the single instance of the Scale active object */

/* Scale class definition ------------------------------------------------*/
$define(components::Scale_constructor)
$define(components::Scale)</text>
  </file>
  <file name="grinder.cpp">
   <text>
//#include &quot;qfn_port.h&quot;
#include &quot;qpn.h&quot;
#include &quot;board.h&quot;
#include &quot;activeObjects.h&quot;

/*Q_DEFINE_THIS_FILE*/


/* Scale class declaration -----------------------------------------------*/
$declare(components::Grinder)

/* Global objects ----------------------------------------------------------*/
Grinder AO_Grinder;     /* the single instance of the Grinder active object */

/* Scale class definition ------------------------------------------------*/
$define(components::Grinder_constructor)
$define(components::Grinder)</text>
  </file>
  <file name="activeObjects.h">
   <text>#ifndef activeobjects_h
#define activeobjects_h

//#include &quot;qfn_port.h&quot;
#include &quot;qpn.h&quot;
#include &quot;board.h&quot;
#include &quot;activeObjects.h&quot;

#include &quot;config.h&quot;               // instance specific configuration

#include &quot;signals.h&quot;

// active objects
extern struct Scale     AO_Scale;
extern struct Grinder   AO_Grinder;

$declare(components::TargetDose)

$declare(components::Scale_constructor)
$declare(components::Grinder_constructor)

#endif /* activeobjects_h */</text>
  </file>
 </directory>
</model>
