<?xml version="1.0" encoding="UTF-8"?>
<model version="3.3.0">
 <documentation>Simple model template for QP-nano</documentation>
 <framework name="qpn"/>
 <package name="components" stereotype="0x02">
  <class name="aoScale" superclass="qpn::QActive">
   <attribute name="weight" type="float" visibility="0x00" properties="0x00"/>
   <statechart>
    <initial target="../1">
     <initial_glyph conn="44,6,5,0,8,6">
      <action box="0,-2,10,2"/>
     </initial_glyph>
    </initial>
    <state name="idle">
     <entry>BSP_println(&quot;Scale enter idle.&quot;);</entry>
     <tran trig="SCALE_TARE" target="../../2">
      <tran_glyph conn="46,16,3,1,-22">
       <action box="-11,-2,10,2"/>
      </tran_glyph>
     </tran>
     <tran trig="SCALE_START" target="../../3">
      <tran_glyph conn="52,24,2,0,6">
       <action box="0,2,13,2"/>
      </tran_glyph>
     </tran>
     <state_glyph node="46,12,12,12">
      <entry box="1,2,6,2"/>
     </state_glyph>
    </state>
    <state name="taring">
     <entry brief="tare">BSP_println(&quot;Scale taring.&quot;);
BSP_scaleTare();</entry>
     <tran trig="SCALE_TARE_DONE" target="../../1">
      <action>QActive_postISR((QActive *)&amp;AO_Grinder, SCALE_TARE_DONE_SIG, 0);</action>
      <tran_glyph conn="24,20,1,3,22">
       <action box="0,-2,16,2"/>
      </tran_glyph>
     </tran>
     <state_glyph node="12,12,12,12">
      <entry box="1,2,7,2"/>
     </state_glyph>
    </state>
    <state name="measuring">
     <entry>BSP_println(&quot;Start measuring.&quot;);</entry>
     <exit>BSP_println(&quot;Stop measuring.&quot;);</exit>
     <initial target="../3">
      <initial_glyph conn="56,34,5,0,6,4">
       <action box="0,-2,10,2"/>
      </initial_glyph>
     </initial>
     <tran trig="SCALE_STOP" target="../../1">
      <tran_glyph conn="68,30,0,1,-12,-10">
       <action box="0,-6,10,2"/>
      </tran_glyph>
     </tran>
     <state name="recovering">
      <entry brief="armTimer">QActive_arm((QActive *)me, SCALE_MEASUREMENT_RATE);</entry>
      <tran trig="Q_TIMEOUT" target="../../3">
       <tran_glyph conn="38,44,1,3,20">
        <action box="0,0,10,2"/>
       </tran_glyph>
      </tran>
      <state_glyph node="28,38,10,10">
       <entry box="1,2,9,2"/>
      </state_glyph>
     </state>
     <state name="sampling">
      <entry brief="sample">me-&gt;weight = BSP_scaleSample();
Weight = me-&gt;weight;</entry>
      <tran trig="SCALE_SAMPLING_DONE" target="../../2">
       <action>QActive_postISR((QActive *)&amp;AO_Grinder, SCALE_SAMPLING_DONE_SIG, 0);</action>
       <tran_glyph conn="58,42,3,1,-20">
        <action box="-18,-2,19,2"/>
       </tran_glyph>
      </tran>
      <state_glyph node="58,38,10,10">
       <entry box="1,2,9,2"/>
      </state_glyph>
     </state>
     <state_glyph node="24,30,48,20">
      <entry box="1,2,6,2"/>
      <exit box="1,4,6,2"/>
     </state_glyph>
    </state>
    <state_diagram size="106,61"/>
   </statechart>
  </class>
  <class name="aoGrinder" superclass="qpn::QActive">
   <attribute name="dose" type="float" visibility="0x00" properties="0x00"/>
   <statechart>
    <initial target="../1">
     <action brief="TargetDose = 7">TargetDose = 7;</action>
     <initial_glyph conn="10,8,5,0,8,4">
      <action box="0,-2,12,2"/>
     </initial_glyph>
    </initial>
    <state name="idle">
     <entry>BSP_println(&quot;Grinder enter idle.&quot;);
BSP_displayPosition(0.0);</entry>
     <tran trig="BUTTON_DOWN" target="../../4">
      <tran_glyph conn="18,22,2,0,6">
       <action box="0,0,14,2"/>
      </tran_glyph>
     </tran>
     <state_glyph node="14,12,8,10">
      <entry box="1,2,7,2"/>
     </state_glyph>
    </state>
    <state name="grinding">
     <entry brief="Start motor &amp; scale">BSP_println(&quot;Start grinding.&quot;);
BSP_ledOn();
QActive_postISR((QActive *)&amp;AO_Scale, SCALE_START_SIG, 0);</entry>
     <exit brief="Stop motor">BSP_ledOff();</exit>
     <initial target="../1">
      <initial_glyph conn="16,50,5,0,4,2">
       <action box="0,-2,10,2"/>
      </initial_glyph>
     </initial>
     <state name="polling">
      <entry>BSP_displayPosition(Weight);</entry>
      <tran trig="SCALE_SAMPLING_DONE">
       <choice target="../../../../5">
        <guard brief="enougth?">Weight &gt;= TargetDose</guard>
        <choice_glyph conn="32,54,5,3,14">
         <action box="0,-4,8,2"/>
        </choice_glyph>
       </choice>
       <choice target="../..">
        <guard brief="else"/>
        <choice_glyph conn="32,54,4,1,4,-8">
         <action box="1,0,10,2"/>
        </choice_glyph>
       </choice>
       <tran_glyph conn="24,54,1,-1,8">
        <action box="0,0,5,4"/>
       </tran_glyph>
      </tran>
      <state_glyph node="16,52,8,8">
       <entry box="1,2,6,2"/>
      </state_glyph>
     </state>
     <state_glyph node="12,42,28,20">
      <entry box="1,2,16,2"/>
      <exit box="1,4,10,2"/>
     </state_glyph>
    </state>
    <state name="done">
     <entry>BSP_println(&quot;Grinder done.&quot;);
BSP_displayPosition(BSP_scaleAverageWeight());</entry>
     <exit brief="Stop scale">QActive_postISR((QActive *)&amp;AO_Scale, SCALE_STOP_SIG, 0);</exit>
     <initial target="../1">
      <initial_glyph conn="34,28,5,3,4">
       <action box="0,-2,10,2"/>
      </initial_glyph>
     </initial>
     <state name="rest">
      <tran trig="SCALE_SAMPLING_DONE">
       <choice target="../..">
        <guard brief="Weight &gt; 0">Weight &gt; 0</guard>
        <choice_glyph conn="52,26,4,1,4,-6">
         <action box="0,1,10,2"/>
        </choice_glyph>
       </choice>
       <choice target="../../../../1">
        <guard brief="else"/>
        <choice_glyph conn="52,26,4,1,-8,-30">
         <action box="0,-4,10,2"/>
        </choice_glyph>
       </choice>
       <tran_glyph conn="46,26,1,-1,6">
        <action box="0,0,4,2"/>
       </tran_glyph>
      </tran>
      <state_glyph node="38,24,8,8"/>
     </state>
     <state_glyph node="28,20,32,14">
      <entry box="1,2,6,2"/>
      <exit box="1,4,10,2"/>
     </state_glyph>
    </state>
    <state name="calibration">
     <entry brief="scale calib">QActive_postISR((QActive *)&amp;AO_Scale, SCALE_TARE_SIG, 0);</entry>
     <tran trig="SCALE_TARE_DONE" target="../../2">
      <tran_glyph conn="18,34,2,0,8">
       <action box="0,0,16,2"/>
      </tran_glyph>
     </tran>
     <state_glyph node="12,28,12,6">
      <entry box="1,2,10,2"/>
     </state_glyph>
    </state>
    <state name="settling">
     <entry brief="arm">QActive_arm((QActive *)me, GRINDER_SETTLING_TIME);</entry>
     <initial target="../2">
      <initial_glyph conn="48,50,5,0,4,2">
       <action box="0,-2,10,2"/>
      </initial_glyph>
     </initial>
     <tran trig="Q_TIMEOUT" target="../../3">
      <tran_glyph conn="54,42,0,2,-8">
       <action box="0,-2,10,2"/>
      </tran_glyph>
     </tran>
     <state name="settlingPolling">
      <entry>BSP_displayPosition(Weight);</entry>
      <tran trig="SCALE_SAMPLING_DONE" target="..">
       <tran_glyph conn="56,54,1,1,6,4,-6">
        <action box="0,0,5,3"/>
       </tran_glyph>
      </tran>
      <state_glyph node="48,52,8,8">
       <entry box="1,2,7,2"/>
      </state_glyph>
     </state>
     <state_glyph node="46,42,20,20">
      <entry box="1,2,6,2"/>
     </state_glyph>
    </state>
    <state_diagram size="90,68"/>
   </statechart>
  </class>
  <class name="aoEncoder" superclass="qpn::QActive">
   <statechart>
    <initial target="../1">
     <initial_glyph conn="34,10,4,0,6">
      <action box="0,-2,10,2"/>
     </initial_glyph>
    </initial>
    <state name="idle">
     <tran trig="ENCODER_INC" target="..">
      <action brief="dose++">TargetDose += GRINDER_DOSE_STEP;
BSP_displayDose(TargetDose);</action>
      <tran_glyph conn="38,20,1,1,12,4,-12">
       <action box="0,-2,18,2"/>
      </tran_glyph>
     </tran>
     <tran trig="ENCODER_DEC" target="..">
      <action brief="dose--">TargetDose -= GRINDER_DOSE_STEP;
BSP_displayDose(TargetDose);</action>
      <tran_glyph conn="30,20,3,3,-12,4,12">
       <action box="-17,-2,17,2"/>
      </tran_glyph>
     </tran>
     <state_glyph node="30,16,8,12"/>
    </state>
    <state_diagram size="80,50"/>
   </statechart>
  </class>
  <attribute name="AO_Scale" type="QActive * const" visibility="0x00" properties="0x00"/>
  <attribute name="AO_Grinder" type="QActive * const" visibility="0x00" properties="0x00"/>
  <attribute name="TargetDose" type="float" visibility="0x00" properties="0x00"/>
  <attribute name="Weight" type="float" visibility="0x00" properties="0x00">
   <documentation>The current measured weight on the scale.</documentation>
  </attribute>
  <attribute name="AO_Encoder" type="QActive * const" visibility="0x00" properties="0x00"/>
  <operation name="aoScale_constructor" type="void" visibility="0x00" properties="0x00">
   <code>QActive_ctor(&amp;AO_Scale.super, Q_STATE_CAST(&amp;aoScale_initial));</code>
  </operation>
  <operation name="aoGrinder_constructor" type="void" visibility="0x00" properties="0x00">
   <documentation>constructor</documentation>
   <code>QActive_ctor(&amp;AO_Grinder.super, Q_STATE_CAST(&amp;aoGrinder_initial));</code>
  </operation>
  <operation name="aoEncoder_constructor" type="void" visibility="0x00" properties="0x00">
   <code>QActive_ctor(&amp;AO_Encoder.super, Q_STATE_CAST(&amp;aoEncoder_initial));</code>
  </operation>
 </package>
 <directory name=".">
  <file name="mega2560-qpn-doser.ino">
   <text>
//#include &quot;includes.h&quot;

//#include &quot;qfn_port.h&quot;               // QP-nano port
#include &quot;qpn.h&quot;                    // QP-nano port
#include &quot;board.h&quot;                  // Board Support Functions
#include &quot;activeObjects.h&quot;          // application interface


Q_DEFINE_THIS_FILE

 // this blathering on is in case you want to make the class a static variable in a function
extern &quot;C&quot; {
  __extension__ typedef int __guard __attribute__((mode (__DI__)));
  int __cxa_guard_acquire(__guard *g) { return !*(char *)(g); };
  void __cxa_guard_release (__guard *g) { *(char *)g = 1; };
  void __cxa_guard_abort (__guard *) { };
} // end extern &quot;C&quot;



static QEvt scaleQueue[5];
static QEvt grinderQueue[5];
static QEvt encoderQueue[5];

// QF_active[] array defines all active object control blocks
QActiveCB const Q_ROM Q_ROM_VAR QF_active[] = {
    { (QActive *)0,           (QEvt *)0,     0                    },
    { (QActive *)&amp;AO_Scale,   scaleQueue,    Q_DIM(scaleQueue)    },
    { (QActive *)&amp;AO_Grinder, grinderQueue,  Q_DIM(grinderQueue)  },
    { (QActive *)&amp;AO_Encoder, encoderQueue,  Q_DIM(encoderQueue)  }
};


// make sure that the QF_active[] array matches QF_MAX_ACTIVE in qpn_port.h
Q_ASSERT_COMPILE(QF_MAX_ACTIVE == Q_DIM(QF_active) - 1);

//Q_ASSERT_COMPILE(1 - 1);

$define(components::TargetDose)
$define(components::Weight)


/* QF callbacks ============================================================*/
void QF_onStartup(void) {
    BSP_setupTickTimer();
}
/*..........................................................................*/
void QF_onCleanup(void) {
}

/*..........................................................................*/
void QV_onIdle(void) {   /* called with interrupts DISABLED, see NOTE1 */
    QF_INT_ENABLE(); /* just enable interrupts */
}
/*..........................................................................*/
void Q_onAssert(char const Q_ROM * const file, int line) {
    /* implement the error-handling policy for your application!!! */
    Serial1.println(&quot;Q_onAssert.&quot;);
    QF_INT_DISABLE(); /* disable all interrupts */
    QF_RESET();  /* reset the CPU */
}

void setup() {

    /*
    BSP_init(); // initialize the BSP

    QF::init(); // initialize the framework and the underlying RT kernel

    static QEvt const *grinder_queueSto[10]; // alocate event queue buffer
    static QEvt const *scale_queueSto[10]; // alocate event queue buffer

    static QF_MPOOL_EL(GrinderEvent) l_smlPoolSto[20]; //storage for small epool

    QF::poolInit(l_smlPoolSto, sizeof(l_smlPoolSto), sizeof(l_smlPoolSto[0])); // initialize event pools...

    DOSE = 7.0;

    AO_Grinder-&gt;start(1, grinder_queueSto, Q_DIM(grinder_queueSto), (void *)0, 0U); // start the grinder active object
    AO_Scale-&gt;start(2, scale_queueSto, Q_DIM(scale_queueSto), (void *)0, 0U);        // start the scale active object
    */

    BSP_init(); // initialize the BSP

    aoScale_constructor();
    aoGrinder_constructor();
    aoEncoder_constructor();

    QF_run();       // transfer control to QF-nano
}

void loop() {

}</text>
  </file>
  <file name="aoScale.cpp">
   <text>
//#include &quot;qfn_port.h&quot;
#include &quot;qpn.h&quot;
#include &quot;board.h&quot;
#include &quot;activeObjects.h&quot;

/*Q_DEFINE_THIS_FILE*/


/* Scale class declaration -----------------------------------------------*/
$declare(components::aoScale)

/* Global objects ----------------------------------------------------------*/
aoScale AO_Scale;     /* the single instance of the Scale active object */

/* Scale class definition ------------------------------------------------*/
$define(components::aoScale_constructor)
$define(components::aoScale)</text>
  </file>
  <file name="aoGrinder.cpp">
   <text>
//#include &quot;qfn_port.h&quot;
#include &quot;qpn.h&quot;
#include &quot;board.h&quot;
#include &quot;activeObjects.h&quot;

/*Q_DEFINE_THIS_FILE*/


/* Scale class declaration -----------------------------------------------*/
$declare(components::aoGrinder)

/* Global objects ----------------------------------------------------------*/
aoGrinder AO_Grinder;     /* the single instance of the Grinder active object */

/* Scale class definition ------------------------------------------------*/
$define(components::aoGrinder_constructor)
$define(components::aoGrinder)</text>
  </file>
  <file name="activeObjects.h">
   <text>#ifndef activeobjects_h
#define activeobjects_h

//#include &quot;qfn_port.h&quot;
#include &quot;qpn.h&quot;
#include &quot;board.h&quot;
#include &quot;activeObjects.h&quot;

#include &quot;config.h&quot;               // instance specific configuration

#include &quot;signals.h&quot;

// active objects
extern struct aoScale     AO_Scale;
extern struct aoGrinder   AO_Grinder;
extern struct aoEncoder   AO_Encoder;

$declare(components::TargetDose)
$declare(components::Weight)

$declare(components::aoScale_constructor)
$declare(components::aoGrinder_constructor)
$declare(components::aoEncoder_constructor)

#endif /* activeobjects_h */</text>
  </file>
  <file name="aoEncoder.cpp">
   <text>
//#include &quot;qfn_port.h&quot;
#include &quot;qpn.h&quot;
#include &quot;board.h&quot;
#include &quot;activeObjects.h&quot;

/*Q_DEFINE_THIS_FILE*/


/* Scale class declaration -----------------------------------------------*/
$declare(components::aoEncoder)

/* Global objects ----------------------------------------------------------*/
aoEncoder AO_Encoder;     /* the single instance of the Encoder active object */

/* Scale class definition ------------------------------------------------*/
$define(components::aoEncoder_constructor)
$define(components::aoEncoder)</text>
  </file>
 </directory>
</model>
